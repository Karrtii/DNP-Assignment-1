@page "/login"
@namespace LoginComponent
@using DNPHandin1.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <body>
            <div class="form-group shadow-lg" style="outline-width: thin;
        position: absolute;
        top: 30%;
        left: 50%;
        border-color:white;
        border-width:50px;
        border-style:solid;
">
                <div class="column text-center">
                    <h1 class="gradient-text font-weight-bold">LOGIN</h1>
                    <br />
                    <div class="form-group align-content-start">
                        <label>Username</label>
                        <input type="text" class="form-control" placeholder="Username" @bind-value="username" />
                    </div>
                    <div class="form-group justify-content-start">
                        <label>Password</label>
                        <input type="password" class="form-control" placeholder="Password" @bind-value="password" />
                    </div>
                    <div style="color:red" class="font-weight-bold">@errorMessage</div>
                    <a id="but" @onclick="PerformLogin"><span class="gradient-span">LOGIN</span></a>
                </div>
            </div>
        </body>
    </NotAuthorized>
    <Authorized>
        <a href="" @onclick="PerformLogout">
            Log out
        </a>
    </Authorized>
</AuthorizeView>
@code { private string username;
    private string password;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        errorMessage = " ‏‏‎";
    }
    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
            NavigationManager.NavigateTo("/AdultsList");
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/Login");
        }
        catch (Exception e) { }
    } }